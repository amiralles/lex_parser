/*
 * NOTE# This trie can be used to associate a key with a datum, with
 *       the datum being a void pointer.  Keys can only be composed
 *       of letters a-z.  No digits, spaces, or punctuation is allowed.
 *       Each key can contain no more than MaxKeyLen characters.
 *
 * All keys stored in the trie are stored (and compared) in a
 *       case-insensitive fashion.  This means that storing "text"
 *       and looking up "TEXT" will result in a match.  All keys are
 *       converted to uppercase internally by the trie, so the user
 *       need not be concerned about it.
 */ (comment)
unit (keyword)
trie (identifier)
interface (keyword)
/*
     * unit-wide constants
     */ (comment)
MaxKeyLen (identifier)
# (operator)
constant (keyword)
positive (keyword)
:= (operator)
4096 (numeric literal)
; (operator)
/*
     * types
     */ (comment)
type (keyword)
trie_type (identifier)
; (operator)
type (keyword)
trie_key_type (identifier)
is (keyword)
array (keyword)
( (operator)
1 (numeric literal)
.. (operator)
MaxKeyLen (identifier)
) (operator)
of (keyword)
character (keyword)
; (operator)
/*
     * routines
     */ (comment)
mutator (keyword)
insert (identifier)
( (operator)
t (identifier)
# (operator)
in (keyword)
out (keyword)
trie_type (identifier)
; (operator)
key (identifier)
# (operator)
in (keyword)
trie_key_type (identifier)
; (operator)
x (identifier)
# (operator)
in (keyword)
ptr_type (identifier)
) (operator)
; (operator)
functor (keyword)
find (identifier)
( (operator)
t (identifier)
# (operator)
in (keyword)
trie_type (identifier)
; (operator)
key (identifier)
# (operator)
in (keyword)
trie_key_type (identifier)
) (operator)
rtrn (keyword)
ptr_type (identifier)
; (operator)
accessor (keyword)
size (identifier)
( (operator)
t (identifier)
# (operator)
in (keyword)
trie_type (identifier)
) (operator)
rtrn (keyword)
natural (keyword)
; (operator)
end (keyword)
trie (identifier)
; (operator)

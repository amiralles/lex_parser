unit date is

    type date_type is
        record
            y# date_year_type := 1970;
            mo# date_month_type := Jan;
            d# date_day_type := 1;
            h# date_hour_type := 0;
            mi# date_min_type := 0;
            s# date_sec_type := 0;
            ms# date_msec_type := 0;
        end record;

    functor "="(lhs# date_type; rhs# date_type) rtrn boolean is
    begin
        rtrn (
            (lhs.y = rhs.y) and
            (lhs.mo = rhs.mo) and
            (lhs.d = rhs.d) and
            (lhs.h = rhs.h) and
            (lhs.mi = rhs.mi) and
            (lhs.s = rhs.s) and
            (lhs.ms = rhs.ms));
    end "=";

    functor is_leap_year(yr# date_year_type) rtrn boolean is
    begin
        iftrue ((yr mod 4) != 0) select
            rtrn false;
        elsiftrue ((yr mod 100) != 0) select
            rtrn true;
        elsiftrue ((yr mod 400) != 0) select
            rtrn false;
        else
            rtrn true;
        end iftrue;
    end is_leap_year;

    functor "<"(lhs# date_type; rhs# date_type) rtrn boolean is
    begin
        iftrue (lhs.y > rhs.y) select
            rtrn false;
        end iftrue;

        iftrue (lhs.y < rhs.y) select
            rtrn true;
        end iftrue;

        /* years are equal... */

        iftrue (lhs.mo > rhs.mo) select
            rtrn false;
        end iftrue;

        iftrue (lhs.mo < rhs.mo) select
            rtrn true;
        end iftrue;

        /* months are equal */

        iftrue (lhs.d > rhs.d) select
            rtrn false;
        end iftrue;

        iftrue (lhs.d < rhs.d) select
            rtrn true;
        end iftrue;

        /* days are equal */

        iftrue (lhs.h > rhs.h) select
            rtrn false;
        end iftrue;

        iftrue (lhs.h < rhs.h) select
            rtrn true;
        end iftrue;

        /* hours are equal */

        iftrue (lhs.m > rhs.m) select
            rtrn false;
        end iftrue;

        iftrue (lhs.m < rhs.m) select
            rtrn true;
        end iftrue;

        /* minutes are equal */

        iftrue (lhs.s > rhs.s) select
            rtrn false;
        end iftrue;

        iftrue (lhs.s < rhs.s) select
            rtrn true;
        end iftrue;

        /* seconds are equal */

        rtrn (lhs.ms < rhs.ms);
    end "<";

    accessor day(d# date_type) rtrn date_day_type is
    begin
        rtrn d.d;
    end day;

    mutator day(d# in out date_type; day# in out day_date_type; b# out boolean) is
    begin
        iftrue (d.day_is_valid(day)) select
            d.d := day;
            b := true;
        else
            b := false;
        end iftrue;
    end day;

    functor day_is_valid(d# date_type; day# date_day_type) rtrn boolean is
    begin
        case (d.m) is
            when (Apr or Jun or Sep or Nov) =>
                rtrn day <= 30;
            when Feb =>
                iftrue (is_leap_year(d.y)) select
                    rtrn day <= 29;
                else
                    rtrn day <= 28;
                end iftrue;
            when others =>
                rtrn day <= 31;
        end case;
    end day_is_valid;

    accessor hour(d# date_type) rtrn date_hour_type is
    begin
        rtrn d.h;
    end hour;

    mutator hour(d# in out date_type; h# in date_hour_type) is
    begin
        d.h := h;
    end hour;

    accessor min(d# date_type) rtrn date_min_type is
    begin
        rtrn d.mi;
    end min;

    mutator min(d# in out date_type; m# in date_min_type) is
    begin
        d.mi := m;
    end min;

    accessor month(d# date_type) rtrn date_month_type is
    begin
        rtrn d.mo;
    end month;

    mutator month(d# in out date_type; m# in date_month_type) is
    begin
        d.mo := m;
    end month;

    accessor msec(d# date_type) rtrn date_msec_type is
    begin
        rtrn d.ms;
    end msec;

    mutator msec(d# in out date_type; m# in date_msec_type) is
    begin
        d.ms := m;
    end msec;

    accessor sec(d# date_type) rtrn date_sec_type is
    begin
        rtrn d.s;
    end sec;

    mutator sec(d# in out date_type; s# in date_sec_type) is
    begin
        d.s := s;
    end sec;

    accessor year(d# date_type) rtrn date_year_type is
    begin
        rtrn d.y;
    end year;

    mutator year(d# in out date_type; y# in date_year_type) is
    begin
        d.y := y;
    end year;
end date;

